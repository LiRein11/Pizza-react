import React, { useEffect } from 'react';
import { useSelector } from 'react-redux';
import qs from 'qs';
import { useNavigate } from 'react-router-dom';

import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Categories from '../components/Categories';
import Sort, { sortList } from '../components/Sort';
import Pagination from '../components/Pagination';
import { useAppDispatch } from '../redux/store';
import { selectFilter } from '../redux/filter/selectors';
import { setCategoryId, setCurrentPage, setFilters } from '../redux/filter/slice';
import { selectPizzaData } from '../redux/pizza/selectors';
import { fetchPizzas } from '../redux/pizza/asyncActions';
import { SearchPizzaParams } from '../redux/pizza/types';

const Home: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { items, status } = useSelector(selectPizzaData);
  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);

  // const { searchValue } = useContext(SearchContext);

  // const [categoriesId, setCategoriesId] = useState(0);
  // const [sortId, setSortId] = useState({
  //   name: '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
  //   sortProperty: 'rating',
  // });

  const onChangeCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx));
  }, []);

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  // const onChangeSelect = (id) => {
  //   dispatch(setSort(id));
  // };

  const getPizzas = async () => {
    const categorySort = categoryId > 0 ? `category=${categoryId}` : '';
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const search = searchValue ? `&search=${searchValue}` : '';

    //   fetch(
    //     `https://6319b9746b4c78d91b41db16.mockapi.io/items?page=${currentPage}&limit=4&${categorySort}&sortBy=${sortBy}&order=${order}${search}`,
    //   )
    //     .then((res) => res.json())
    //     .then((arr) => {
    //       setPizzas(arr);
    //       setIsLoading(false);
    //     });  // Fetch –∑–∞–ø—Ä–æ—Å
    // await axios
    //   .get(
    //     `https://6319b9746b4c78d91b41db16.mockapi.io/items?page=${currentPage}&limit=4&${categorySort}&sortBy=${sortBy}&order=${order}${search}`,
    //   )
    //   .then((res) => {
    //     setPizzas(res.data);
    //     setIsLoading(false);
    //     // console.log('–ü–µ—Ä–≤–æ–µ');
    //   });
    // console.log('–í—Ç–æ—Ä–æ–µ') // –ò–º–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –æ—Ç–≤–µ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–µ, –±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–µ—Ä–≤—ã–º. Async –≤—Å–µ–≥–¥–∞ –∫–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è await. –ù–æ –µ—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –µ—â–µ —Ñ—É–Ω–∫—Ü–∏—è, –≥–¥–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await, —Ç–æ –∏ –Ω–∞ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–µ–Ω async.

    // try {
    // setPizzas(res.data);
    dispatch(
      fetchPizzas({
        sortBy,
        categoryId: String(categoryId),
        order,
        search,
        currentPage: String(currentPage),
      }),
    );
    // } catch (error) {
    //   console.log(error, 'error');
    //   alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ü—Ü');
    // }
    // –ë–ª–∞–≥–æ–¥–∞—Ä—è async await –º–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .then, –≤—ã—à–µ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–¥–∞–∫—Å–µ.

    window.scrollTo(0, 0); // –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö
  };

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—à–∏—Ç–∏–µ (–ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ (isMounted = false)). –≠—Ç–æ —Ñ–∏–∫—Å —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—É–¥–∞ –Ω–µ –≤—à–∏–≤–∞–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Ü—Ü, –∞ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. (15)
  useEffect(() => {
    if (isMounted.current) {
      const params = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId: categoryId > 0 ? categoryId : null,
        currentPage,
      });

      const queryString = qs.stringify(params, { skipNulls: true });

      navigate(`/?${queryString}`);
    }

    if (!window.location.search) {
      dispatch(fetchPizzas({} as SearchPizzaParams));
    }
  }, [categoryId, sort.sortProperty, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams; // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª ?, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

      const sort = sortList.find((obj) => obj.sortProperty === params.sortBy);

      dispatch(
        setFilters({
          searchValue: params.search,
          categoryId: Number(params.categoryId),
          currentPage: Number(params.currentPage),
          sort: sort || sortList[0],
        }),
      );
      isSearch.current = true;
    }
  }, [categoryId, sort.sortProperty, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  useEffect(() => {
    window.scrollTo(0, 0); // –ß—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –Ω–∞—Å –∫–∏–¥–∞–ª–æ –≤–≤–µ—Ä—Ö (–∏–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    getPizzas();

    isSearch.current = false;
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const pizzas = items
    // .filter((obj) => {
    //   if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
    //     return true;
    //   }
    //   return false;
    // })  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –ø–∏—Ü—Ü –∏ –≤—ã–≤–æ–¥ –º–∞—Å—Å–∏–≤–∞ –ø–∏—Ü—Ü —á–µ—Ä–µ–∑ React.js (–Ω–æ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–π, —Ç–æ –Ω—É–∂–Ω–æ —Å –±–µ–∫–æ–º —Ä–∞–±–æ—Ç–∞—Ç—å)
    .map((obj: any) => <PizzaBlock key={obj.id} {...obj} />);

  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  // value={sort} onChangeSelect={(id) => onChangeSelect(id)}

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort}/>
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
      )}
      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
